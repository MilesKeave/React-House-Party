/*! For license information please see tsparticles.updater.tilt.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("@tsparticles/engine"));else if("function"==typeof define&&define.amd)define(["@tsparticles/engine"],t);else{var i="object"==typeof exports?t(require("@tsparticles/engine")):t(e.window);for(var n in i)("object"==typeof exports?exports:e)[n]=i[n]}}(this,(e=>(()=>{"use strict";var t={533:t=>{t.exports=e}},i={};function n(e){var o=i[e];if(void 0!==o)return o.exports;var a=i[e]={exports:{}};return t[e](a,a.exports,n),a.exports}n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{n.r(o),n.d(o,{loadTiltUpdater:()=>r});var e=n(533);class t{constructor(){this.enable=!1,this.speed=0,this.decay=0,this.sync=!1}load(t){t&&(void 0!==t.enable&&(this.enable=t.enable),void 0!==t.speed&&(this.speed=(0,e.setRangeValue)(t.speed)),void 0!==t.decay&&(this.decay=(0,e.setRangeValue)(t.decay)),void 0!==t.sync&&(this.sync=t.sync))}}class i extends e.ValueWithRandom{constructor(){super(),this.animation=new t,this.direction="clockwise",this.enable=!1,this.value=0}load(e){super.load(e),e&&(this.animation.load(e.animation),void 0!==e.direction&&(this.direction=e.direction),void 0!==e.enable&&(this.enable=e.enable))}}const a=2*Math.PI;class s{constructor(e){this.container=e}getTransformValues(e){const t=e.tilt?.enable&&e.tilt;return{b:t?Math.cos(t.value)*t.cosDirection:void 0,c:t?Math.sin(t.value)*t.sinDirection:void 0}}init(t){const i=t.options.tilt;if(!i)return;t.tilt={enable:i.enable,value:(0,e.degToRad)((0,e.getRangeValue)(i.value)),sinDirection:(0,e.getRandom)()>=e.halfRandom?1:-1,cosDirection:(0,e.getRandom)()>=e.halfRandom?1:-1,min:0,max:a};let n=i.direction;if("random"===n){n=Math.floor(2*(0,e.getRandom)())>0?"counter-clockwise":"clockwise"}switch(n){case"counter-clockwise":case"counterClockwise":t.tilt.status="decreasing";break;case"clockwise":t.tilt.status="increasing"}const o=t.options.tilt?.animation;o?.enable&&(t.tilt.decay=1-(0,e.getRangeValue)(o.decay),t.tilt.velocity=(0,e.getRangeValue)(o.speed)/360*this.container.retina.reduceFactor,o.sync||(t.tilt.velocity*=(0,e.getRandom)()))}isEnabled(e){const t=e.options.tilt?.animation;return!e.destroyed&&!e.spawning&&!!t?.enable}loadOptions(e,...t){e.tilt||(e.tilt=new i);for(const i of t)e.tilt.load(i?.tilt)}update(t,i){this.isEnabled(t)&&t.tilt&&(0,e.updateAnimation)(t,t.tilt,!1,"none",i)}}async function r(e,t=!0){await e.addParticleUpdater("tilt",(e=>new s(e)),t)}})(),o})()));